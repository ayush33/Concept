1)Principle Of Recursion
Recursion is an approach to solving problems using a function that calls itself as a subroutine.
A recursive function should have the following properties so that it does not result in an infinite loop:
1)A simple base case (or cases) — a terminating scenario that does not use recursion to produce an answer.
2)A set of rules, also known as recurrence relation that reduces all other cases towards the base case.

Printing a string in reverse Order
private static void printReverse(char [] str) {
  helper(0, str);
}
private static void helper(int index, char [] str) {
  if (str == null || index >= str.length) {
    return;
  }
  helper(index + 1, str);
  System.out.print(str[index]);
}

2) Recursion Function

For a problem, if there exists a recursive solution, we can follow the guidelines below to implement it. 
For instance, we define the problem as the function {F(X)}F(X) to implement, where {X}X is the input of the function which also defines the scope of the problem.
Then, in the function {F(X)}F(X), we will:
Break the problem down into smaller scopes F(X) - > f(X0), f(X1)....
Finally, process the results from the recursive function calls to solve the problem corresponding to {X}X.
-> Example
To showcase the above guidelines, we give another example on how to solve a problem recursively. 
Given a linked list, swap every two adjacent nodes and return its head.
e.g.  for a list 1-> 2 -> 3 -> 4, one should return the head of list as 2 -> 1 -> 4 -> 3.
We define the function to implement as swap(head), where the input parameter head refers to the head of a linked list. The function should return the head of the new linked list that has any adjacent nodes swapped.
Following the guidelines we lay out above, we can implement the function as follows:
First, we swap the first two nodes in the list, i.e. head and head.next;
Then, we call the function self as swap(head.next.next) to swap the rest of the list following the first two nodes.
Finally, we attach the returned head of the sub-list in step (2) with the two nodes swapped in step (1) to form a new linked list.
As an exercise, you can try to implement the solution using the steps we provided above. Click on "Swap Nodes in Pairs" to try to implement the solution yourself. 
class Solution {
    public ListNode swapPairs(ListNode head) {
     if(head==null || head.next==null)
     {
        return head;
     }
    swap(head,head.next);  
     return head;  
    }
    private void swap(ListNode n1, ListNode n2)
      {
        
       int temp = n1.val;
       n1.val = n2.val;
       n2.val=temp;
        
        if(n2.next==null||n1.next.next.next==null)
          {return;}
       swap(n1.next.next,n2.next.next);
    }
}

3)  Recurrence Relation
There are two important things that one needs to figure out before implementing a recursive function:

a) recurrence relation: the relationship between the result of a problem and the result of its subproblems.
b) base case: the case where one can compute the answer directly without any further recursion calls. 
Sometimes, the base cases are also called bottom cases, since they are often the cases where the problem has been reduced to the minimal scale, i.e. the bottom, if we consider that dividing the problem into subproblems is in a top-down manner.

Pascal Traingle

Let's start with the recurrence relation within the Pascal's Triangle.
First of all, we define a function f(i, j)f(i,j) which returns the number in the Pascal's Triangle in the i-th row and j-th column.

We then can represent the recurrence relation with the following formula:
f(i, j) = f(i - 1, j - 1) + f(i - 1, j)
f(i,j)=f(i−1,j−1)+f(i−1,j)

As one can see, the leftmost and rightmost numbers of each row are the base cases in this problem, which are always equal to 1.
As a result, we can define the base case as follows:

f(i,j)=1 where j=1 or j=i
Starting from f(5, 3)f(5,3), we can break it down as f(5, 3) = f(4, 2) + f(4, 3)f(5,3)=f(4,2)+f(4,3), we then call f(4, 2)f(4,2) and f(4, 3)f(4,3) recursively:

For the call of f(4, 2)f(4,2), we could extend it further until we reach the base cases, as follows:
f(4, 2) = f(3, 1) + f(3, 2) = f(3, 1) + (f(2, 1) + f(2, 2)) = 1 + (1 + 1) = 3
f(4,2)=f(3,1)+f(3,2)=f(3,1)+(f(2,1)+f(2,2))=1+(1+1)=3

For the call of f(4, 3)f(4,3), similarly we break it down as:
f(4, 3) = f(3, 2) + f(3, 3) = (f(2, 1) + f(2, 2)) + f(3, 3) = (1 + 1) + 1 = 3
f(4,3)=f(3,2)+f(3,3)=(f(2,1)+f(2,2))+f(3,3)=(1+1)+1=3

Finally we combine the results of the above subproblems:
f(5, 3) = f(4, 2) + f(4, 3) = 3 + 3 = 6
f(5,3)=f(4,2)+f(4,3)=3+3=6

  public static void print(int n) {
       for (int i = 1; i < n; i++) {
           for (int j = 1; j <= i; j++) {
               System.out.print(pascal(i, j) + " ");
           }
           System.out.println();
       }
   }

   public static int pascal(int i, int j) {
       if (j == 1) {
           return 1;
       } else if (j == i) {
           return 1;
       } else {
           return pascal(i - 1, j - 1) + pascal(i - 1, j);
       }

   }
